#!/bin/bash
shellpath=`dirname $0`
output_dir=transgram_outdir
BamFile="NoInput"
thread=2
MinAverageCov=0.001 #--min-average-junc-ratio 
minScore=0.1 # 0.5
TransLen=200
Seed=2
datasource="NULL"
CustomizedModel="NULL"

assembledGTF="NoInput"
usage()
{
cat << EOT
===========================================================================

TransGram-v.0.0 usage:

** Required **

--bam/-b <string>		: Path to the alignment BAM files generated by minimap2.

--ont/--pacbio			: For Nanopore or PacBio reads
---------------------------------------------------------------------------

** Options **

--help/-h			: Output TransGram Help Information

--version/-v			: Print current version of TransGram

--output_dir/-o       <string>	: Output path for TransGram (default:transgram_outdir)

--min_trans_length/-l <int>   	: Minimum assembled transcript length (default:200)

--min_trans_score/-s  <double> 	: Minimum xGboost score for the assembled transcripts (default:0.1)

--min_average_frac/-c <double>  : Minimum junction coverage fraction by average junction coverage (default:0.001)

--QA		      <string>	: Path to the transcripts generated from the correspoding BAM file(in GTF format).
				  TransGram will assess the quality and filter them based on a specific parameter(requires -s)

--CusModel	      <string>  : Path to the customized model created by the users.

---------------------------------------------------------------------------

** Typical commands **

A typical TransGram command for ONT data might be:

  TransGram -b alignment.bam --ont -o transgram_outdir

===========================================================================
EOT
}
#usage

# parse options:
RET=`getopt -o hvb:o:d:l:s:c:z:y:ab \
--long help,version,bam:,output_dir:,\
min_average_frac:,min_trans_length:,\
min_trans_score:,\
min_seed_cov:,\
QA:,\
CusModel:,\
ont,pacbio \
-n ' * ERROR' -- "$@"`

eval set -- "$RET"
# set option values
while true; do
    case "$1" in
        -h | --help ) usage; exit 1;;
        -v | --version ) echo "** The current version of TransGram is v.0.0 **"; exit 1;;
        -o | --output_dir) output_dir=$2     
			shift 2 ;;
        -b | --bam) 	   BamFile=$2 
			shift 2 ;;
	-d | --min_average_frac) MinAverageCov=$2 
			shift 2 ;;
	-l | --min_trans_length) TransLen=$2 
			shift 2 ;;
	-s | --min_trans_score) minScore=$2 
			shift 2 ;;
	-c | --min_seed_cov) Seed=$2 
			shift 2 ;;
	-a | --ont) datasource="ont"
			shift 1 ;;
	-b | --pacbio) datasource="pacbio"
			shift 1 ;;
	-z | --QA) assembledGTF=$2
			shift 2 ;;
	-y | --CusModel) CustomizedModel=$2
			shift 2 ;;
        -- ) shift; break ;;
        * ) echoerror "internal error!" ; exit 1 ;;
     esac
done

#echo $BamFile
#exit

if [ $BamFile == "NoInput" ]; then
         echo "    "
         echo "[Error] : BAM input file is not provided!"
         echo "    "
	 usage
         exit 1
fi

if [ $datasource == "NULL" ]; then
         echo "    "
         echo "[Error] : Please specify --ont or --pacbio!"
         echo "    "
	 usage
         exit 1
fi

if [ $CustomizedModel != "NULL" ]; then
         echo "    "
         echo "[WARNNING] : You will use a custom model to perform the transcript filtering!"
         echo "    "
fi
MyDate=$(date "+%d/%m/%Y %T")
if [ ! -x "$output_dir" ]; then  
    mkdir $output_dir  
else 
    echo "[$MyDate] [Warning] : $output_dir exists already. It will be overwritten."
    rm -rf $output_dir
    mkdir $output_dir
fi

## run in parallel ###############################################################
Run(){
 #cat $1 >>$output_dir/log
 tmpfile=$$.fifo
 mkfifo $tmpfile
 exec 4<>$tmpfile
 rm $tmpfile

 for ((i=1;i<=100;i++));do # thred
         echo
         done >&4
         SAVEIFS=$IFS
         IFS=$'\n'
         for i in `cat $1`
         do
         read
           (eval ${i};echo >&4 ) &
           done <&4
           IFS=$SAVEIFS
           wait
           exec 4>&-

}
#################################################################


if [ $assembledGTF != "NoInput" ]; then
 	##Quality Assessment --QA 
	$shellpath/transgram-graph $BamFile -L -o $output_dir
	$shellpath/transgram-trans2pathsinfo $assembledGTF $output_dir/transgram.graph $output_dir/gtf2path.info
	$shellpath/transgram-path-search -g $output_dir/transgram.graph -o $output_dir --only-determine-dataType

	if [ $datatype == "alpha" ]; then
		TraningData=$shellpath/xgboost_predict/features/alpha.model.csv
		if [ $CustomizedModel != "NULL" ]; then
			TraningData=$CustomizedModel
		fi
		python $shellpath/xgboost_predict/xgboost_model_predict.py -i $TraningData -g $output_dir/gtf2path.info -o $output_dir
	elif [ $datasource == "pacbio" ]; then
		if [ $CustomizedModel != "NULL" ]; then
                        TraningData=$CustomizedModel
                fi
		TraningData=$shellpath/xgboost_predict/features/beta-pac.model.csv
		python $shellpath/xgboost_predict/xgboost_model_predict.py -i $TraningData -g $output_dir/gtf2path.info -o $output_dir
	elif [ $datasource == "ont" ]; then
		if [ $CustomizedModel != "NULL" ]; then
                        TraningData=$CustomizedModel
                fi
		TraningData=$shellpath/xgboost_predict/features/beta-ont.model.csv
		python $shellpath/xgboost_predict/xgboost_model_predict.py -i $TraningData -g $output_dir/gtf2path.info -o $output_dir
	fi

	$shellpath/transgram-filter $output_dir/xgboost_predict_pro.txt $assembledGTF $output_dir/TransGram.gtf $minScore transgram
	
	exit
fi


#################################################################
#building graph
MyDate=$(date "+%d/%m/%Y %T")
echo "[$MyDate] Building graph..."

echo $shellpath/transgram-graph $BamFile -L -o $output_dir >$output_dir/command
echo $shellpath/transgram-graph  $BamFile -o $output_dir >>$output_dir/command
Run $output_dir/command


#searching paths
MyDate=$(date "+%d/%m/%Y %T")
echo "[$MyDate] Searching paths..."

$shellpath/transgram-path-search -r $output_dir/transgram.reads.raw.align -g $output_dir/transgram.graph -o $output_dir \
				 -l $TransLen -d $MinAverageCov \
				 -F $Seed

datatype=$(tail -n 1 $output_dir/data.info)

#xgboost prediction
MyDate=$(date "+%d/%m/%Y %T")
echo "[$MyDate] Filtering..."
$shellpath/transgram-trans2pathsinfo $output_dir/transgram-temp.gtf $output_dir/transgram.graph $output_dir/gtf2path.info
if [ $datatype == "alpha" ]; then
	TraningData=$shellpath/xgboost_predict/features/alpha.model.csv
	if [ $CustomizedModel != "NULL" ]; then
                        TraningData=$CustomizedModel
	fi
	python $shellpath/xgboost_predict/xgboost_model_predict.py -i $TraningData -g $output_dir/gtf2path.info -o $output_dir
elif [ $datasource == "pacbio" ]; then
	TraningData=$shellpath/xgboost_predict/features/beta-pac.model.csv
	if [ $CustomizedModel != "NULL" ]; then
                        TraningData=$CustomizedModel
        fi
	python $shellpath/xgboost_predict/xgboost_model_predict.py -i $TraningData -g $output_dir/gtf2path.info -o $output_dir
elif [ $datasource == "ont" ]; then
	TraningData=$shellpath/xgboost_predict/features/beta-ont.model.csv
	if [ $CustomizedModel != "NULL" ]; then
                        TraningData=$CustomizedModel
        fi
	python $shellpath/xgboost_predict/xgboost_model_predict.py -i $TraningData -g $output_dir/gtf2path.info -o $output_dir
fi

#filtering
assemble_gtf=$output_dir/transgram-temp.gtf
if [ -s $output_dir/xgboost_predict_pro.txt ]; then
	$shellpath/transgram-filter $output_dir/xgboost_predict_pro.txt $assemble_gtf $output_dir/TransGram.gtf $minScore transgram
	MyDate=$(date "+%d/%m/%Y %T")
	echo "[$MyDate] Done!"
fi


