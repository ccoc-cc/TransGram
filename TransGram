#!/bin/bash
shellpath=`dirname $0`
output_dir=tiglon_outdir
left=read_1.fastq
right=read_2.fastq
single=Mysingle.fastq
BamFile="No_input"
output_dir=tiglon_outdir
thread=2
MinAverageCov=0.03 #--min-average-junc-ratio 
MinUnbalanceCov=0.03 #--min-unbalance-ratio
Filter=0.1 # 0.5
Gap=200 #--min-gap-length
TransLen=200
datasource="NULL"
usage()
{
cat << EOT
===========================================================================

TransGram-v.1.0 usage:

** Required **

--bam/-b <string>		: path to the alignment BAM files generated by minimap2.

--ont/--pacbio			: Nanopore or PacBio reads
---------------------------------------------------------------------------

** Options **

--help/-h			: Output Tiglon Help Information

--version/-v			: Print current version of TransGram

--output_dir/-o <string>	: Output path, default: transgram_outdir

--min_trans_length/-L <int>   	: Minimum assembled transcript length, default: 200.

--thread/-p <int> 		: Number of threads to use (default: 2)

---------------------------------------------------------------------------

** Typical commands **

A typical TransGram command for single-end data might be:

  TransGram -b alignment.bam --ont -o transgram_outdir

===========================================================================
EOT
}
#usage

# parse options:
RET=`getopt -o hvb:o:d:D:L:e:c:p:ab \
--long help,version,bam:,output_dir:,\
min_average_frac:,min_unbalance_frag:,min_trans_length:,\
min_gap_length:,min_trans_cov:,\
thread:,\
ont,pacbio \
  -n ' * ERROR' -- "$@"`

eval set -- "$RET"
# set option values
while true; do
    case "$1" in
        -h | --help ) usage; exit 1;;
        -v | --version ) echo "** The current version of TransGram is v.1.1 **"; exit 1;;
        -o | --output_dir) output_dir=$2     
			shift 2 ;;
        -b | --bam) 	   BamFile=$2 
			shift 2 ;;
	-d | --min_average_frac) MinAverageCov=$2 
			shift 2 ;;
	-D | --min_unbalance_frac) MinUnbalanceCov=$2
			shift 2 ;;
	-L | --min_trans_length) TransLen=$2 
			shift 2 ;;
	-e | --min_gap_length) Gap=$2 
			shift 2 ;;
	-c | --min_trans_cov) Filter=$2 
			shift 2 ;;
	-p | --thread) thread=$2 
			shift 2 ;;
	-a | --ont) datasource="ont"
			shift 1 ;;
	-b | --pacbio) datasource="pacbio"
			shift 1 ;;
        -- ) shift; break ;;
        * ) echoerror "internal error!" ; exit 1 ;;
     esac
done

echo $BamFile
#exit

if [ $BamFile == "No_input" ]; then
         echo "    "
         echo "[Error] : BAM input file is not provided!"
         echo "    "
	 usage
         exit 1
fi

if [ $datasource == "NULL" ]; then
         echo "    "
         echo "[Error] : Please specify --ont or --pacbio!"
         echo "    "
	 usage
         exit 1
fi

MyDate=$(date "+%d/%m/%Y %T")
if [ ! -x "$output_dir" ]; then  
    mkdir $output_dir  
else 
    echo "[$MyDate] [Warning] : $output_dir exists already. It will be overwritten."
    rm -rf $output_dir
    mkdir $output_dir
fi

## run in parallel ###############################################################
Run(){
    cat $1 >>$output_dir/log
 tmpfile=$$.fifo
 mkfifo $tmpfile
 exec 4<>$tmpfile
 rm $tmpfile

 for ((i=1;i<=100;i++));do # thred
         echo
         done >&4
         SAVEIFS=$IFS
         IFS=$'\n'
         for i in `cat $1`
         do
         read
           (eval ${i};echo >&4 ) &
           done <&4
           IFS=$SAVEIFS
           wait
           exec 4>&-

}
#################################################################

#building graph
echo $shellpath/transgram-graph $BamFile -L -o $output_dir >$output_dir/command
echo $shellpath/transgram-graph  $BamFile -o $output_dir >>$output_dir/command
Run $output_dir/command


#searching paths
$shellpath/transgram-path-search $output_dir/transgram.reads.raw.align $output_dir/transgram.graph alpha $output_dir
datatype=$(tail -n 1 $output_dir/data.info)

#xgboost prediction
$shellpath/transgram-trans2pathsinfo $output_dir/transgram-temp.gtf $output_dir/transgram.graph $output_dir/gtf2path.info
if [ $datatype == "alpha" ]; then
	TraningData=$shellpath/xgboost_predict/features/NM_R1.csv
	python $shellpath/xgboost_predict/xgboost_model_predict.py -i $TraningData -g $output_dir/gtf2path.info
elif [ $datasource == "pacbio" ]; then
	TraningData=$shellpath/xgboost_predict/features/NM_R6.csv
	python $shellpath/xgboost_predict/xgboost_model_predict.py -i $TraningData -g $output_dir/gtf2path.info
elif [ $datasource == "ont" ]; then
	TraningData=$shellpath/xgboost_predict/features/SIM-new.csv
	python $shellpath/xgboost_predict/xgboost_model_predict.py -i $TraningData -g $output_dir/gtf2path.info
fi

#filtering
assemble_gtf=$output_dir/transgram-temp.gtf
$shellpath/transgram-filter xgboost_predict_pro.txt $assemble_gtf $output_dir/TransGram.gtf 0.15 transgram


